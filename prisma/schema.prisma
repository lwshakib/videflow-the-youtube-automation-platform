// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum VIDEO_PROGRESS {
  PENDING
  COMPLETED
}

enum THUMBNAIL_STATUS {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum LOGO_STATUS {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum SCHEDULED_UPLOAD_STATUS {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}


model User {
  id         String      @id @default(cuid())
  clerkId    String      @unique
  name       String
  email      String     
  imageUrl   String?
  credits    Int         @default(3)
  youtubeRefreshToken String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  videos     VideoData[]
  thumbnailRequests ThumbnailRequest[]
  logoRequests LogoRequest[]
  scheduledUploads ScheduledUpload[]
}

model VideoData {
  id             String         @id @default(cuid())
  clerkId        String
  title          String
  voice          String
  script         String
  captionStyle   Json
  videoStyle     String
  captions       Json?          
  images         String[]       
  audioUrl       String? 
  videoUrl       String?       
  videoProgress  VIDEO_PROGRESS @default(PENDING)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  user           User           @relation(fields: [clerkId], references: [clerkId], onDelete: Cascade)
  scheduledUploads ScheduledUpload[]
}

model ThumbnailRequest {
  id          String           @id @default(cuid())
  clerkId     String
  title       String
  description String
  status      THUMBNAIL_STATUS @default(PENDING)
  thumbnails  Json?            // Array of generated thumbnail objects
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  user        User             @relation(fields: [clerkId], references: [clerkId], onDelete: Cascade)
}

model LogoRequest {
  id          String      @id @default(cuid())
  clerkId     String
  logoName    String
  description String
  status      LOGO_STATUS @default(PENDING)
  logos       Json?       // Array of generated logo objects
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [clerkId], references: [clerkId], onDelete: Cascade)
}

model ScheduledUpload {
  id            String                   @id @default(cuid())
  videoId       String
  clerkId       String
  scheduledDate DateTime
  timezone      String
  description   String?
  status        SCHEDULED_UPLOAD_STATUS @default(PENDING)
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
  user          User                     @relation(fields: [clerkId], references: [clerkId], onDelete: Cascade)
  video         VideoData                @relation(fields: [videoId], references: [id], onDelete: Cascade)
}
